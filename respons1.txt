To achieve a responsive menu that stays on top for larger screens and moves to the bottom for mobile screens, you can use CSS media queries. To load content dynamically without reloading the navigation menu, you can use JavaScript to handle the content loading via AJAX or fetch API.

Here's a simple example:

*HTML:*
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Menu</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <nav id="menu">
        <ul>
            <li><a href="#home" onclick="loadContent('home.html')">Home</a></li>
            <li><a href="#about" onclick="loadContent('about.html')">About</a></li>
            <li><a href="#contact" onclick="loadContent('contact.html')">Contact</a></li>
        </ul>
    </nav>
    <div id="main-content">
        <p>Welcome! Click on the menu items to load content.</p>
    </div>
    <script src="script.js"></script>
</body>
</html>


*CSS (styles.css):*
css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

#menu {
    background-color: #333;
    color: white;
    width: 100%;
}

#menu ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: space-around;
}

#menu ul li {
    display: inline;
}

#menu ul li a {
    display: block;
    color: white;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}

#menu ul li a:hover {
    background-color: #111;
}

#main-content {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
}

@media (max-width: 600px) {
    body {
        flex-direction: column-reverse;
    }

    #menu {
        position: fixed;
        bottom: 0;
    }

    #main-content {
        flex: 1;
        padding-bottom: 60px; /* Height of the menu */
    }
}


*JavaScript (script.js):*
javascript
function loadContent(page) {
    fetch(page)
        .then(response => response.text())
        .then(data => {
            document.getElementById('main-content').innerHTML = data;
        })
        .catch(error => console.error('Error loading content:', error));
}


*Additional Notes:*
1. Create separate HTML files (home.html, about.html, and contact.html) for the content you want to load.
2. Ensure these files are in the same directory as the main HTML file or adjust the paths accordingly.
3. The fetch API is used here to dynamically load the content of these pages without refreshing the entire page.

This setup ensures that on larger screens, the navigation menu remains on top, and on smaller screens (like mobile devices), it moves to the bottom. The content is dynamically loaded into the main content area without reloading the menu.