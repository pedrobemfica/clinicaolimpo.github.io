Creating a frontend in JavaScript to connect with a backend API for exchanging user information, schedule information, and files involves several steps. Below is a basic example using modern JavaScript with the Fetch API for HTTP requests. This example assumes you have a basic HTML structure and a backend API ready to handle the requests.

### HTML Structure
First, ensure you have an HTML structure to interact with:
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Interaction Example</title>
</head>
<body>
    <h1>API Interaction Example</h1>
    
    <section>
        <h2>User Information</h2>
        <form id="userForm">
            <label for="userId">User ID:</label>
            <input type="text" id="userId" name="userId" required>
            <button type="submit">Get User Info</button>
        </form>
        <pre id="userInfo"></pre>
    </section>
    
    <section>
        <h2>Schedule Information</h2>
        <form id="scheduleForm">
            <label for="scheduleId">Schedule ID:</label>
            <input type="text" id="scheduleId" name="scheduleId" required>
            <button type="submit">Get Schedule Info</button>
        </form>
        <pre id="scheduleInfo"></pre>
    </section>
    
    <section>
        <h2>Upload File</h2>
        <form id="fileForm">
            <input type="file" id="fileInput" name="file" required>
            <button type="submit">Upload File</button>
        </form>
        <pre id="fileUploadResult"></pre>
    </section>

    <script src="app.js"></script>
</body>
</html>


### JavaScript (app.js)
Here is the JavaScript code to handle the form submissions and interact with the backend API:
javascript
document.addEventListener('DOMContentLoaded', () => {
    const userForm = document.getElementById('userForm');
    const scheduleForm = document.getElementById('scheduleForm');
    const fileForm = document.getElementById('fileForm');

    userForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const userId = document.getElementById('userId').value;
        try {
            const response = await fetch(`/api/users/${userId}`);
            const data = await response.json();
            document.getElementById('userInfo').textContent = JSON.stringify(data, null, 2);
        } catch (error) {
            document.getElementById('userInfo').textContent = 'Error fetching user information';
        }
    });

    scheduleForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const scheduleId = document.getElementById('scheduleId').value;
        try {
            const response = await fetch(`/api/schedules/${scheduleId}`);
            const data = await response.json();
            document.getElementById('scheduleInfo').textContent = JSON.stringify(data, null, 2);
        } catch (error) {
            document.getElementById('scheduleInfo').textContent = 'Error fetching schedule information';
        }
    });

    fileForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const fileInput = document.getElementById('fileInput');
        const formData = new FormData();
        formData.append('file', fileInput.files[0]);

        try {
            const response = await fetch('/api/files', {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
            document.getElementById('fileUploadResult').textContent = JSON.stringify(data, null, 2);
        } catch (error) {
            document.getElementById('fileUploadResult').textContent = 'Error uploading file';
        }
    });
});


### Explanation
1. *HTML Structure*: 
    - There are three sections for user information, schedule information, and file upload.
    - Each section has a form with inputs and a submit button.
    - There are <pre> elements to display the results returned from the API.

2. *JavaScript Code*: 
    - The script waits for the DOM to fully load using DOMContentLoaded.
    - Event listeners are added to each form to handle the submit event.
    - For user and schedule information, the fetch API is used to send GET requests.
    - For file upload, a POST request is made with FormData.

### Backend API Expectations
- *GET /api/users/:userId*: Should return user information in JSON format.
- *GET /api/schedules/:scheduleId*: Should return schedule information in JSON format.
- *POST /api/files*: Should handle file uploads and return a JSON response.

This setup provides a basic example of how to connect a frontend to a backend API for exchanging user information, schedule information, and files. Adjust the API endpoints and HTML as needed for your specific application.