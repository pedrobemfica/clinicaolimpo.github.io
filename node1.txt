Creating a backend using Node.js and Express to handle user authentication, scheduling, and file handling involves several steps. Here's a comprehensive guide to build this backend, integrating MongoDB for storage, and including Google and Facebook authentication along with email/password authentication. Below is a step-by-step setup:

### Prerequisites
1. *Node.js* and *npm* installed.
2. *MongoDB* instance (either local or via MongoDB Atlas).
3. *Google Developer Console* and *Facebook Developer Account* for OAuth credentials.
4. *Postman* (or similar tool) for testing APIs.

### Step 1: Set Up the Project

1. *Initialize Node.js Project*
   bash
   mkdir backend-app
   cd backend-app
   npm init -y
   

2. *Install Required Packages*
   bash
   npm install express mongoose bcryptjs jsonwebtoken passport passport-google-oauth20 passport-facebook passport-local dotenv multer
   

### Step 2: Create the Directory Structure

backend-app/
│
├── config/
│   ├── passport.js
│   ├── keys.js
│
├── models/
│   ├── User.js
│   ├── Appointment.js
│
├── routes/
│   ├── auth.js
│   ├── appointments.js
│   ├── files.js
│
├── uploads/
│
├── .env
│
├── server.js


### Step 3: Config Files

1. *config/keys.js*
   js
   module.exports = {
       mongoURI: 'YOUR_MONGODB_URI',
       googleClientID: 'YOUR_GOOGLE_CLIENT_ID',
       googleClientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',
       facebookClientID: 'YOUR_FACEBOOK_CLIENT_ID',
       facebookClientSecret: 'YOUR_FACEBOOK_CLIENT_SECRET',
       jwtSecret: 'YOUR_JWT_SECRET'
   };
   

2. *config/passport.js*
   js
   const GoogleStrategy = require('passport-google-oauth20').Strategy;
   const FacebookStrategy = require('passport-facebook').Strategy;
   const LocalStrategy = require('passport-local').Strategy;
   const mongoose = require('mongoose');
   const bcrypt = require('bcryptjs');
   const keys = require('./keys');
   const User = require('../models/User');

   module.exports = function(passport) {
       // Google Strategy
       passport.use(new GoogleStrategy({
           clientID: keys.googleClientID,
           clientSecret: keys.googleClientSecret,
           callbackURL: '/auth/google/callback'
       }, (accessToken, refreshToken, profile, done) => {
           User.findOne({ googleId: profile.id })
               .then(user => {
                   if (user) {
                       done(null, user);
                   } else {
                       const newUser = new User({
                           googleId: profile.id,
                           name: profile.displayName,
                           email: profile.emails[0].value
                       });

                       newUser.save().then(user => done(null, user));
                   }
               });
       }));

       // Facebook Strategy
       passport.use(new FacebookStrategy({
           clientID: keys.facebookClientID,
           clientSecret: keys.facebookClientSecret,
           callbackURL: '/auth/facebook/callback',
           profileFields: ['id', 'displayName', 'emails']
       }, (accessToken, refreshToken, profile, done) => {
           User.findOne({ facebookId: profile.id })
               .then(user => {
                   if (user) {
                       done(null, user);
                   } else {
                       const newUser = new User({
                           facebookId: profile.id,
                           name: profile.displayName,
                           email: profile.emails[0].value
                       });

                       newUser.save().then(user => done(null, user));
                   }
               });
       }));

       // Local Strategy
       passport.use(new LocalStrategy({ usernameField: 'email' }, (email, password, done) => {
           User.findOne({ email: email }).then(user => {
               if (!user) {
                   return done(null, false, { message: 'No user found' });
               }

               bcrypt.compare(password, user.password, (err, isMatch) => {
                   if (err) throw err;
                   if (isMatch) {
                       return done(null, user);
                   } else {
                       return done(null, false, { message: 'Password incorrect' });
                   }
               });
           });
       }));

       passport.serializeUser((user, done) => {
           done(null, user.id);
       });

       passport.deserializeUser((id, done) => {
           User.findById(id, (err, user) => done(err, user));
       });
   };
   

### Step 4: Models

1. *models/User.js*
   js
   const mongoose = require('mongoose');

   const UserSchema = new mongoose.Schema({
       googleId: { type: String },
       facebookId: { type: String },
       name: { type: String, required: true },
       email: { type: String, required: true },
       password: { type: String },
       date: { type: Date, default: Date.now }
   });

   module.exports = mongoose.model('User', UserSchema);
   

2. *models/Appointment.js*
   js
   const mongoose = require('mongoose');

   const AppointmentSchema = new mongoose.Schema({
       user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
       date: { type: Date, required: true },
       time: { type: String, required: true },
       created_at: { type: Date, default: Date.now }
   });

   module.exports = mongoose.model('Appointment', AppointmentSchema);
   

### Step 5: Routes

1. *routes/auth.js*
   js
   const express = require('express');
   const passport = require('passport');
   const jwt = require('jsonwebtoken');
   const bcrypt = require('bcryptjs');
   const User = require('../models/User');
   const keys = require('../config/keys');
   const router = express.Router();

   // Google OAuth
   router.get('/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

   router.get('/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {
       const token = jwt.sign({ id: req.user.id }, keys.jwtSecret, { expiresIn: '1h' });
       res.redirect('/dashboard?token=' + token);
   });

   // Facebook OAuth
   router.get('/facebook', passport.authenticate('facebook', { scope: ['email'] }));

   router.get('/facebook/callback', passport.authenticate('facebook', { failureRedirect: '/' }), (req, res) => {
       const token = jwt.sign({ id: req.user.id }, keys.jwtSecret, { expiresIn: '1h' });
       res.redirect('/dashboard?token=' + token);
   });

   // Local Registration
   router.post('/register', (req, res) => {
       const { name, email, password } = req.body;
       User.findOne({ email }).then(user => {
           if (user) {
               return res.status(400).json({ email: 'Email already exists' });
           } else {
               const newUser = new User({ name, email, password });
               bcrypt.genSalt(10, (err, salt) => {
                   bcrypt.hash(newUser.password, salt, (err, hash) => {
                       if (err) throw err;
                       newUser.password = hash;
                       newUser.save().then(user => {
                           const token = jwt.sign({ id: user.id }, keys.jwtSecret, { expiresIn: '1h' });
                           res.json({ token });
                       });
                   });
               });
           }
       });
   });

   // Local Login
   router.post('/login', (req, res) => {
       const { email, password } = req.body;
       User.findOne({ email }).then(user => {
           if (!user) {
               return res.status(400).json({ email: 'User not found' });
           }

           bcrypt.compare(password, user.password, (err, isMatch) => {
               if (err) throw err;
               if (isMatch) {
                   const token = jwt.sign({ id: user.id }, keys.jwtSecret, { expiresIn: '1h' });
                   res.json({ token });
               } else {
                   return res.status(400).json({ password: 'Password incorrect' });
               }
           });
       });
   });

   module.exports = router;
   

2. *routes/appointments.js*
   js
   const express = require('express');
   const mongoose = require('mongoose');
   const passport = require('passport');
   const Appointment = require('../models/Appointment');
   const router = express.Router();

   // Middleware to authenticate JWT
   const authenticate = passport.authenticate('jwt', { session: false });

   // Schedule an appointment
   router.post('/schedule', authenticate, (req, res) => {
       const { date, time } = req.body;
       const newAppointment = new Appointment({
           user: req.user.id,
           date,
           time
       });

       newAppointment.save().then(appointment => res.json(appointment));
   });

   // Get appointments for a user
   router.get('/', authenticate, (req, res) => {
       Appointment.find({ user: req.user.id }).then(appointments => res.json(appointments));
   });

   module.exports = router;
   

3. *routes/files.js*
   ```js
   const express = require('express');
   const multer = require('multer');
   const path = require('path');
   const passport = require('passport');
   const router